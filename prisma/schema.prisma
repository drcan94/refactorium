// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums for consistent data across the application
enum SmellCategory {
  CODE_SMELL
  DESIGN_PATTERN
  REFACTORING
  PERFORMANCE
  SECURITY
  MAINTAINABILITY
  READABILITY
  TESTING
  ARCHITECTURE
  BEST_PRACTICE
}

enum DifficultyLevel {
  BEGINNER    // 1 star
  EASY        // 2 stars
  MEDIUM      // 3 stars
  HARD        // 4 stars
  EXPERT      // 5 stars
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}


model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  location      String?
  website       String?
  githubUrl     String?
  linkedinUrl   String?
  twitterUrl    String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  favorites     UserSmell[]
  progress      UserProgress[]
  preferences   UserPreferences?
  activities    UserActivity[]
  smells        Smell[]        // Smells created by this user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Smell {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String         @unique
  category    SmellCategory
  description String
  badCode     String
  goodCode    String
  testHint    String
  difficulty  DifficultyLevel @default(BEGINNER)
  tags        String
  isPublished Boolean        @default(true)
  problem     String?        // Detailed problem description
  solution    String?        // Detailed solution description
  testing     String?        // Testing guidelines
  examples    String?        // Code examples
  references  String?        // External references
  authorId    String?        @db.Uuid // Author of the smell
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  author      User?          @relation(fields: [authorId], references: [id], onDelete: SetNull)
  favorites   UserSmell[]
  progress    UserProgress[]
}

model UserSmell {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  smellId   String   @db.Uuid
  createdAt DateTime @default(now())

  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  smell   Smell @relation(fields: [smellId], references: [id], onDelete: Cascade)

  @@unique([userId, smellId])
}

model UserProgress {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  smellId   String   @db.Uuid
  completed Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  smell     Smell @relation(fields: [smellId], references: [id], onDelete: Cascade)

  @@unique([userId, smellId])
}

model UserPreferences {
  id                    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String           @unique @db.Uuid
  theme                 Theme            @default(AUTO)
  defaultDifficulty     DifficultyLevel? @default(BEGINNER)
  emailUpdates          Boolean          @default(true)
  progressReminders     Boolean          @default(false)
  newSmells             Boolean          @default(true)
  weeklyDigest          Boolean          @default(true)
  profileVisibility     ProfileVisibility @default(PUBLIC)
  showProgress          Boolean          @default(true)
  allowAnalytics        Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  action       String   // 'favorite', 'progress', 'view', 'search', etc.
  resourceId   String?  // smellId or page identifier
  resourceType String?  // 'smell', 'page', 'search'
  metadata     String?  // JSON string for additional data
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Setting {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
